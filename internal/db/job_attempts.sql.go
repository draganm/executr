// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_attempts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createJobAttempt = `-- name: CreateJobAttempt :one
INSERT INTO job_attempts (
    job_id, executor_id, executor_ip, status
) VALUES (
    $1, $2, $3, $4
) RETURNING id, job_id, executor_id, executor_ip, started_at, ended_at, status, error_message
`

type CreateJobAttemptParams struct {
	JobID      uuid.UUID `json:"job_id"`
	ExecutorID string    `json:"executor_id"`
	ExecutorIp string    `json:"executor_ip"`
	Status     string    `json:"status"`
}

func (q *Queries) CreateJobAttempt(ctx context.Context, arg CreateJobAttemptParams) (JobAttempt, error) {
	row := q.db.QueryRow(ctx, createJobAttempt,
		arg.JobID,
		arg.ExecutorID,
		arg.ExecutorIp,
		arg.Status,
	)
	var i JobAttempt
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.ExecutorID,
		&i.ExecutorIp,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
		&i.ErrorMessage,
	)
	return i, err
}

const getJobAttempts = `-- name: GetJobAttempts :many
SELECT id, job_id, executor_id, executor_ip, started_at, ended_at, status, error_message FROM job_attempts
WHERE job_id = $1
ORDER BY started_at DESC
`

func (q *Queries) GetJobAttempts(ctx context.Context, jobID uuid.UUID) ([]JobAttempt, error) {
	rows, err := q.db.Query(ctx, getJobAttempts, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobAttempt{}
	for rows.Next() {
		var i JobAttempt
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.ExecutorID,
			&i.ExecutorIp,
			&i.StartedAt,
			&i.EndedAt,
			&i.Status,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestJobAttempt = `-- name: GetLatestJobAttempt :one
SELECT id, job_id, executor_id, executor_ip, started_at, ended_at, status, error_message FROM job_attempts
WHERE job_id = $1
ORDER BY started_at DESC
LIMIT 1
`

func (q *Queries) GetLatestJobAttempt(ctx context.Context, jobID uuid.UUID) (JobAttempt, error) {
	row := q.db.QueryRow(ctx, getLatestJobAttempt, jobID)
	var i JobAttempt
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.ExecutorID,
		&i.ExecutorIp,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
		&i.ErrorMessage,
	)
	return i, err
}

const updateJobAttempt = `-- name: UpdateJobAttempt :exec
UPDATE job_attempts SET
    ended_at = NOW(),
    status = $2,
    error_message = $3
WHERE id = $1
`

type UpdateJobAttemptParams struct {
	ID           uuid.UUID   `json:"id"`
	Status       string      `json:"status"`
	ErrorMessage pgtype.Text `json:"error_message"`
}

func (q *Queries) UpdateJobAttempt(ctx context.Context, arg UpdateJobAttemptParams) error {
	_, err := q.db.Exec(ctx, updateJobAttempt, arg.ID, arg.Status, arg.ErrorMessage)
	return err
}
