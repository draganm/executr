// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_attempts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countJobAttempts = `-- name: CountJobAttempts :one
SELECT COUNT(*) as attempt_count
FROM job_attempts
WHERE job_id = $1
`

func (q *Queries) CountJobAttempts(ctx context.Context, jobID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countJobAttempts, jobID)
	var attempt_count int64
	err := row.Scan(&attempt_count)
	return attempt_count, err
}

const getJobAttempts = `-- name: GetJobAttempts :many
SELECT id, job_id, executor_id, executor_ip, started_at, ended_at, status, error_message FROM job_attempts
WHERE job_id = $1
ORDER BY started_at DESC
`

func (q *Queries) GetJobAttempts(ctx context.Context, jobID uuid.UUID) ([]JobAttempt, error) {
	rows, err := q.db.Query(ctx, getJobAttempts, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobAttempt{}
	for rows.Next() {
		var i JobAttempt
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.ExecutorID,
			&i.ExecutorIp,
			&i.StartedAt,
			&i.EndedAt,
			&i.Status,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestJobAttempt = `-- name: GetLatestJobAttempt :one
SELECT id, job_id, executor_id, executor_ip, started_at, ended_at, status, error_message FROM job_attempts
WHERE job_id = $1
ORDER BY started_at DESC
LIMIT 1
`

func (q *Queries) GetLatestJobAttempt(ctx context.Context, jobID uuid.UUID) (JobAttempt, error) {
	row := q.db.QueryRow(ctx, getLatestJobAttempt, jobID)
	var i JobAttempt
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.ExecutorID,
		&i.ExecutorIp,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
		&i.ErrorMessage,
	)
	return i, err
}

const recordJobAttempt = `-- name: RecordJobAttempt :one
INSERT INTO job_attempts (
    job_id, executor_id, executor_ip, status
) VALUES (
    $1, $2, $3, 'running'
)
RETURNING id, job_id, executor_id, executor_ip, started_at, ended_at, status, error_message
`

type RecordJobAttemptParams struct {
	JobID      uuid.UUID `json:"job_id"`
	ExecutorID string    `json:"executor_id"`
	ExecutorIp string    `json:"executor_ip"`
}

func (q *Queries) RecordJobAttempt(ctx context.Context, arg RecordJobAttemptParams) (JobAttempt, error) {
	row := q.db.QueryRow(ctx, recordJobAttempt, arg.JobID, arg.ExecutorID, arg.ExecutorIp)
	var i JobAttempt
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.ExecutorID,
		&i.ExecutorIp,
		&i.StartedAt,
		&i.EndedAt,
		&i.Status,
		&i.ErrorMessage,
	)
	return i, err
}

const updateJobAttempt = `-- name: UpdateJobAttempt :exec
UPDATE job_attempts
SET ended_at = NOW(),
    status = $2,
    error_message = $3
WHERE job_id = $1
  AND executor_id = $4
  AND ended_at IS NULL
`

type UpdateJobAttemptParams struct {
	JobID        uuid.UUID `json:"job_id"`
	Status       string    `json:"status"`
	ErrorMessage *string   `json:"error_message"`
	ExecutorID   string    `json:"executor_id"`
}

func (q *Queries) UpdateJobAttempt(ctx context.Context, arg UpdateJobAttemptParams) error {
	_, err := q.db.Exec(ctx, updateJobAttempt,
		arg.JobID,
		arg.Status,
		arg.ErrorMessage,
		arg.ExecutorID,
	)
	return err
}
